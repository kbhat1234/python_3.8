# give this command inside the container apt-get update apt-get install apache2 apt-get
install curl apt-get install sqlite2 service apache2 status service apache2 start service apache2 stop


docker basics

# when no docker is installed sudo docker version

Output:
$ docker -version
Command 'docker' not found, but can be installed with: sudo apt install docker.io
===============================================================

# when docker is installed sudo docker
--version

Output:
$ docker --version Docker version 19.03.8, build afacb8b7f0
================================================================

# when docker is installed with version sudo docker version

Output:
$ sudo docker version


Client:
Version:	19.03.8
API version:	1.40
Go version:	go1.13.8
Git commit:	afacb8b7f0
Built:	Tue Jun 23 22:26:12 2020
OS/Arch:	linux/amd64
Experimental:	false

Server:
Engine:
Version:	19.03.8
API version:	1.40 (minimum version 1.12) Go
version:	go1.13.8
Git commit:	afacb8b7f0
Built:	Thu Jun 18 08:26:54 2020
OS/Arch:	linux/amd64
Experimental:	false containerd:
Version:	1.3.3-0ubuntu2 GitCommit:
runc:
Version:	spec: 1.0.1-dev
 
GitCommit:
docker-init:
Version:	0.18.0
GitCommit:
=============================================================================
# docker pull <image-name> - when pulling images from dockerhub sudo docker pull ubuntu Output:
$ sudo docker pull ubuntu Using default tag: latest latest: Pulling from library/ubuntu 3ff22d22a855:
Pull complete e7cb79d19722: Pull complete 323d0d660b6a: Pull complete b7f616834fd0: Pull complete
Digest:sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636d Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest
===============================================================================

# docker images - images downloaded on the docker engine(container) sudo docker images

Output:
$ sudo docker images	
REPOSITORY	TAG	IMAGE ID	CREATED
SIZE			
ubuntu
73.9MB	latest	1e4467b07108	10 days ago
===================================================================================
====

# docker run - with ubuntu image on container sudo docker run -it
-d ubuntu
(-it: interactive terminal, -d: run in background as daemon)

Output:
$ sudo docker run -it -d ubuntu 723db1dd423425c1a001ea3fbf3118cc8e69ad4fac22d7cdacd0790208281c0b
===================================================================================
====

# docker run -it -p <82:80> -d <image-name> - will run the image on thecontainer with the port forwarding. sudo docker run -it -p 82:80 -d ubuntu
(-it: interactive terminal, -d: run in background as daemon, -p: portforwarding
<container-port external: container port internal>) Output:

# docker ps - list only container running in the system sudo docker ps

Output:
$ sudo docker ps	
CONTAINER ID	IMAGE	COMMAND	CREATED
STATUS	PORTS	NAMES
 
723db1dd4234	ubuntu	"/bin/bash"	2 minutes ago	Up
2 minutes		tender_mestorf		
===================================================================================
======================================================
# docker ps -a - will list all containers running/exited insystem sudo docker ps -a Output:
$ sudo docker ps -a
CONTAINER ID	IMAGE		COMMAND CREATED	STATUS		PORTS
	NAMES	
0a783089cf38	ubuntu	"/bin/bash"	2 minutes ago	Up
2 minutes
723db1dd4234	
ubuntu	romantic_rosalind
"/bin/bash"	
3 hours ago
Exited (0) 2 minutes ago		tender_mestorf	
===================================================================================
===============================================================
# docker container stop <container-id> - stopping the specific containerrunning. sudo docker stop 0a783089cf38 Output:
$ sudo docker stop 0a783089cf38 0a783089cf38
===================================================================================
=====================================================

# docker container exec -t <container-id> - by doing this we are logging intothe specific container sessions. sudo docker exec -it c519b3108c3b bash

Output:
$ sudo docker exec -it c519b3108c3bbash root@c519b3108c3b:/# ls
bin	dev	home	lib32	libx32	mnt	proc	run	srv	tmp	var
boot	etc	lib	lib64	media	opt	root	sbin	sys	usr	
===================================================================================
==========================================

# docker kill <container-id> - will kill the containers which sometimes cannotbe safely exited due to some reasons. sudo docker kill c519b3108c3b

Output:
$ sudo docker kill 7c4683ab4625 7c4683ab4625
===================================================================================
==========================================

# docker rm <container-id> - will delete/remove the containers which usedubuntu image. This is basically used to remove the containers.
sudo docker rm 7c4683ab4625

Output:
$ sudo docker rm 7c4683ab4625 7c4683ab4625
===================================================================================
==========================================
 
# docker rm -f $(docker ps -a -q) - will remove all containers running/exitedin the system sudo docker rm -f $(sudo docker ps -a -q)

Output:
$ sudo docker rm -f $(sudo docker ps -a-q) 42c4677fd302 4a64be7f1012
===================================================================================
===============================================

# docker rmi <image-id> - will remove images from the docker system, rmi -remove image sudo docker rmi a24bb4013296

Output:
$ sudo docker images	
REPOSITORY	TAG	IMAGE ID	CREATED
SIZE			
ubuntu
73.9MB	latest	1e4467b07108	10 days ago
alpine	latest	a24bb4013296	2 months ago
5.57MB			

$ sudo docker rmi a24bb4013296 Untagged: alpine:latest
Untagged: alpine@sha256:185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321 Deleted: sha256:a24bb4013296f61e89ba57005a7b3e52274d8edd3ae2077d04395f806b63d83e Deleted: sha256:50644c29ef5a27c9a40c393a73ece2479de78325cae7d762ef3cdc19bf42dd0a
===================================================================================
==========================================

# docker rmi <username>/<image-name>:<tag-name> - remove the image when thishas dependency on child images. sudo docker rmi kbhat2376/ubuntu-2020-08-06:latest

Output:
$ sudo docker images	
REPOSITORY		TAG	IMAGE ID
CREATED	SIZE		
kbhat2376/ubuntu-2020-08-06-latest	latest	f225620c6fa1	About
an hour ago	215MB			
kbhat2376/ubuntu-2020-08-06
hours ago	215MB	latest	343be86aab07	2

$ sudo docker rmikbhat2376/ubuntu-2020-08-06:latest Untagged: kbhat2376/ubuntu-2020-08-06:latest Untagged: kbhat2376/ubuntu-2020-08- 06@sha256:8ca80f5b8d6ce56bb00d822859a13843e6c05ba6b2f0f9f026451462d6ce0e8e $ sudo docker images
REPOSITORY		TAG	IMAGE ID CREATED	SIZE
kbhat2376/ubuntu-2020-08-06-latest	latest	f225620c6fa1	About an hour ago	215MB
===================================================================================
============================================
 
# docker rmi <image-id> - this will throw an error when we have image to bedeleted and this has dependency with child image.
sudo docker rmi 343be86aab07

Output:
$ sudo docker rmi 343be86aab07
Error response from daemon: conflict: unable to delete 343be86aab07 (cannotbe forced) - image has dependent child images
===================================================================================
===============================================

# docker commit b4da9724f9fb debian-2020-08-05 - will save the containerwith latest set of installations, and save as new image.
sudo docker commit b4da9724f9fb debian-2020-08-05

Output:
$ sudo docker commit b4da9724f9fbdebian-2020-08-05 sha256:d78dc99fd4b0ee19efc2ed8fc0ce823e3546ceb40e3be1d3bce33eb8253264a4 $ sudo docker images
REPOSITORY
SIZE	TAG	IMAGE ID	CREATED
debian-2020-08-05	latest	d78dc99fd4b0	11 seconds ago
114MB			
debian-05-08-2020
114MB	latest	cf3a1cd779e9	5 minutes ago
debian	latest	ae8514941ea4	2 weeks ago
114MB			

$ sudo docker exec -it b4da9724f9fb77f809a735f8b03c57ab87f6f8acebfd3b3fe22282185a47dc9b bash root@b4da9724f9fb:/# ls
bin	dev	home	lib	media	opt	root	sbin	sys	usr
boot	etc	karthik	lib64	mnt	proc	run	srv	tmp	var
root@b4da9724f9fb:/# cd karthik root@b4da9724f9fb:/karthik# ls k1.txt
k2.txt
root@b4da9724f9fb:/karthik# cat >> k1.txt fsdjfsdjsdfjk dsfsdjfkjds
sdklsdklfsdkf sdsdjfdskjdf

root@b4da9724f9fb:/karthik# cat k1.txt fsdjfsdjsdfjk dsfsdjfkjds
sdklsdklfsdkf sdsdjfdskjdf
root@b4da9724f9fb:/karthik# cat >> k2.txt Welcome to docker
===================================================================================
=============================================
# docker login - will login to docker sudo docker login Output:
Authenticating with existing credentials...
Login did not succeed, error: Error response from daemon: Gethttps://registry- 1.docker.io/v2/: Get https://auth.docker.io/token?
 
account=kbhat2376&client_id=docker&offline_token=true&service=registry.docker.io: net/http: request canceled (Client.Timeout exceeded while awaiting headers) (Client.Timeout exceeded while awaiting headers)
Login with your Docker ID to push and pull images from Docker Hub. If youdon't have a Docker ID, head over to https://hub.docker.com to create one.

Username (kbhat2376): kbhat2376 Password:myindia@2376

Error response from daemon: Get https://registry-1.docker.io/v2/: net/http:request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
===================================================================================
===================================================================================
==========================

# docker push <username>/<image-name> - will push the custom local image tothe docker hub sudo docker push kbhat2376/ubuntu-2020-08-06-latest

Output:
The push refers to repository[docker.io/kbhat2376/ubuntu-2020-08-06-latest] 7ae832ac16f7: Pushed 5b747ba07043: Mounted fromkbhat2376/ubuntu-2020-08-06 78c7a3b3d608:
Mounted fromkbhat2376/ubuntu-2020-08-06 d387dc402e97: Mounted from kbhat2376/ubuntu-2020-08-06	095624243293:	Mounted	from kbhat2376/ubuntu-2020-08-06	a37e74863e72:	Mounted	from kbhat2376/ubuntu-2020-08-06	8eeb4a14bcb4:	Mounted	from kbhat2376/ubuntu-2020-08-06	ce3011290956:	Mounted	from kbhat2376/ubuntu-2020-08-06 latest: digest: sha256:1565b372bca309c22f44120683c25ea6ae2dda9c77826aa7035f2edd99a279ea size: 1989
===================================================================================
=============================================================================

# docker volumes - bind mount, docker volumes
# docker - using bind mount
# syntax: sudo docker run -it <source-path>:<target-path> -d <image-name>
sudo docker run -it -v /home/karthik/Dockerfile:/app -d kbhat2376/ubuntu_20120614

# login to container
# syntax: sudo docker exec -it <container-id> bash
sudo dcoker exec -it 0a783089cf38 bash

# go to cd /app
ls -al
# you should be able to see the files that are bind mount in host operating system


# docker volumes - docker volumes
# syntx: sudo docker run -it --mount source=<volume-name>,target=<target-path> -d <image-name>
sudo docker run -it --mount source=v1,target=/app -d kbhat2376/ubuntu_20210614

sudo docker ps -a
sudo docker exec -it 0a783089cf38 bash

# create docker volume-name
syntax: sudo docker volume create <volume-name>
sudo docker volume create v1
'''
Output:
DRIVER    VOLUME NAME
local     v1
'''

# listing docker volumes using ls
syntax: sudo docker volume ls
sudo docker volume ls
'''
Output:
DRIVER    VOLUME NAME
local     v1
local     v2
local     v3
'''

# inspect docker volume - detailed infomation of one or more volumes
syntax: sudo docker volume inspect [v1 v2 v3 ...]
sudo docker volume inspect v1 v2 v3
'''
Output:
[
    {
        "CreatedAt": "2021-06-15T10:19:14+05:30",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/v1/_data",
        "Name": "v1",
        "Options": null,
        "Scope": "local"
    },
    {
        "CreatedAt": "2021-06-15T10:50:16+05:30",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/v2/_data",
        "Name": "v2",
        "Options": {},
        "Scope": "local"
    },
    {
        "CreatedAt": "2021-06-15T10:50:19+05:30",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/v3/_data",
        "Name": "v3",
        "Options": {},
        "Scope": "local"
    }
]
'''

# remove one or more volumes
syntax: sudo docker volume rm [v1 v2 ...]
sudo docker volume rm v2 v3
'''
Output:
v2
v3

# prune all the volumes which are not connected to one or more containers
syntax: sudo docker volume prune
sudo docker volume prune
'''
Output:
WARNING! This will remove all local volumes not used by at least one container.
Are you sure you want to continue? [y/N] y
Total reclaimed space: 0B
'''

#Docker compose
#Installation of docker compose on docker container engine
1. check first docker-compose installed in the container engine
	docker-compose -v
2. install curl is not installed
	sudo apt-get install curl
3. sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
4. sudo chmod +x /usr/local/bin/docker-compose
5. sudo docker-compose --version
'''
Output:
docker-compose version 1.29.2, build 5becea4c
'''

# create a docker-compose.yml file with all instructions to bring up service containers.
nano docker-compose.yml

# check the validity of the docker-compose file
docker-compose config
'''
Output
services:
  mysqldb:
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_USER: wordpress
    image: mysql:5.7
    restart: always
    volumes:
    - mysql_data:/var/lib/mysql:rw
  wordpress:
    depends_on:
      mysqldb:
        condition: service_started
    environment:
      WORDPRESS_DB_HOST: mysqldb:3306
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_USER: wordpress
    image: wordpress:latest
    ports:
    - published: 8000
      target: 80
    restart: always
    volumes:
    - wordpress_data:/var/www/html:rw
version: '3.9'
volumes:
  mysql_data: {}
  wordpress_data: {}

'''

# start the docker-compose.yml using the command
# normal serives up using command
docker-compose up -d
'''
Output:
Creating network "wordpress_project_default" with the default driver
Creating wordpress_project_mysqldb_1 ... done
Creating wordpress_project_wordpress_1 ... done
'''

# docker-compose up -d --scale <service-name>=<no.of replicas>
docker-compose up -d --scale wordpress=2 --scale mysqldb=2
'''
Output:


# stop all the services using docker-compose.yml
docker-compose down
'''
Output:
Stopping wordpress_project_wordpress_1 ... done
Stopping wordpress_project_mysqldb_1   ... done
Removing wordpress_project_wordpress_1 ... done
Removing wordpress_project_mysqldb_1   ... done
Removing network wordpress_project_default
'''

# docker swarm - Master/Leader node as swarm manager --> Manager
syntax: sudo docker swarm init --advertise-addr <master ip-addr>
sudo docker swarm init --advertise-addr 18.222.223.181
'''
Output:
Swarm initialized: current node (ls25o2ejy2zja070ebb3gb2ea) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-1uonyltdkcny1suss7vez56q6ng85ji27o9njygqgduqsfulv4-8vn830bdnv0cffcakjq95wmhq 18.222.223.181:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
'''

# docker swarm - join the worker1 node to the master node of swarm --> Worker1
syntax: sudo docker join --token <token id from master>
sudo docker join --token SWMTKN-1-1uonyltdkcny1suss7vez56q6ng85ji27o9njygqgduqsfulv4-8vn830bdnv0cffcakjq95wmhq 18.222.223.181:2377
'''
Output:
This node joined a swarm as a worker.
'''

# docker swarm - join the worker2 node to the master node of swarm --> Worker2
syntax: sudo docker join --token <token id from master>
sudo docker join --token SWMTKN-1-1uonyltdkcny1suss7vez56q6ng85ji27o9njygqgduqsfulv4-8vn830bdnv0cffcakjq95wmhq 18.222.223.181:2377
'''
Output:
This node joined a swarm as a worker.
'''

# Manage join tokens
sudo docker swarm join-token worker
'''
Output:
To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-62m16ob6bsrwk39gyhfrnvrml9uyd0oqi5ihx4snppujvy413o-1br0974fcc16xxj5qdniuf8lz 18.222.223.181:2377
'''

# checking the swarm state -> Swarm Master node 
sudo docker info
'''
Output:
Client:
 Context:    default
 Debug Mode: false

Server:
 Containers: 0
  Running: 0
  Paused: 0
  Stopped: 0
 Images: 0
 Server Version: 20.10.2
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 1
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: active
  NodeID: ls25o2ejy2zja070ebb3gb2ea
  Is Manager: true
  ClusterID: reucnfzydlorpny4bgbkz8gix
  Managers: 1
  Nodes: 3
  Default Address Pool: 10.0.0.0/8
  SubnetSize: 24
  Data Path Port: 4789
  Orchestration:
   Task History Retention Limit: 5
  Raft:
   Snapshot Interval: 10000
   Number of Old Snapshots to Retain: 0
   Heartbeat Tick: 1
   Election Tick: 10
  Dispatcher:
   Heartbeat Period: 5 seconds
  CA Configuration:
   Expiry Duration: 3 months
   Force Rotate: 0
  Autolock Managers: false
  Root Rotation In Progress: false
  Node Address: 18.222.223.181
  Manager Addresses:
   18.222.223.181:2377
 Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version:
 runc version:
 init version:
 Security Options:
  apparmor
  seccomp
   Profile: default
 Kernel Version: 5.4.0-1045-aws
 Operating System: Ubuntu 20.04.2 LTS
 OSType: linux
 Architecture: x86_64
 CPUs: 1
 Total Memory: 978.6MiB
 Name: ip-172-31-20-8
 ID: KUHA:ZUVD:NWVZ:TDLM:72X2:WT5D:5NBN:BFR6:J4TN:2AJV:TZTR:BD67
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Username: kbhat2376
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false

WARNING: No swap limit support
WARNING: No blkio weight support
WARNING: No blkio weight_device support
'''

# Checking the swarm state --> Worker node
sudo docker info
'''
Output:
Client:
 Context:    default
 Debug Mode: false

Server:
 Containers: 0
  Running: 0
  Paused: 0
  Stopped: 0
 Images: 0
 Server Version: 20.10.2
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 1
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: active
  NodeID: tbokl87ukov9pnod9dbn3k1ac
  Is Manager: false
  Node Address: 172.31.16.16
  Manager Addresses:
   18.222.223.181:2377
 Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version:
 runc version:
 init version:
 Security Options:
  apparmor
  seccomp
   Profile: default
 Kernel Version: 5.4.0-1045-aws
 Operating System: Ubuntu 20.04.2 LTS
 OSType: linux
 Architecture: x86_64
 CPUs: 1
 Total Memory: 978.6MiB
 Name: ip-172-31-16-16
 ID: S7UE:WXX7:CFCJ:CBY2:6XZR:VUKX:QWVS:M7HS:U7HR:MBKM:HPDI:TF76
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false

WARNING: No swap limit support
WARNING: No blkio weight support
WARNING: No blkio weight_device support
'''

# Display the nodes attached to swarm master
sudo docker node ls
'''
Output:
ID                            HOSTNAME           STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
tbokl87ukov9pnod9dbn3k1ac     ip-172-31-16-16    Ready     Active                          20.10.2
w0hykb1bv6zfqoop0z5d2cbrp     ip-172-31-19-156   Ready     Active                          20.10.2
ls25o2ejy2zja070ebb3gb2ea *   ip-172-31-20-8     Ready     Active         Leader           20.10.2
'''

# Exiting the swarm - master node
sudo docker swarm leave 
or 
sudo docker swarm leave --force
'''
Output:
Node left the swarm.
'''

# Exiting the swarm - worker node 
sudo docker swarm leave
or 
sudo docker swarm leave --force
'''
Output:
Node left the swarm
'''

# swarm manager - display nodes
sudo docker node ls
'''
Output:
ID                            HOSTNAME           STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
zy5gi33gew5qcgb4c2wsq4z8v     ip-172-31-16-16    Down      Active                          20.10.2
fd6navub4juvvx50r828aofz1     ip-172-31-19-156   Down      Active                          20.10.2
on0h86tdm51njy1rqnmubmtmt *   ip-172-31-20-8     Ready     Active         Leader           20.10.2
'''

# Removing a node from swarm manager
syntax: sudo docker node rm <node-id>
or sudo docker node rm -f <node-id>
sudo docker node rm 

# removing the node from manager - swarm manager
syntax: sudo docker node rm <node-id>
or sudo docker node rm -f <node-id>
sudo docker node rm zy5gi33gew5qcgb4c2wsq4z8v
'''
Output:
zy5gi33gew5qcgb4c2wsq4z8v
'''

# create a docker swarm service - using create
syntax: sudo docker service create --replicas <no.of replicas> -p <port-mapping> <image-name>
sudo docker service create --replicas 3 -p 80:80 nginx:latest
'''
Output:
z3ocao16vpdesq4wh325q2r9z
overall progress: 3 out of 3 tasks
1/3: running   [==================================================>]
2/3: running   [==================================================>]
3/3: running   [==================================================>]
verify: Service converged
'''

# delete a service - using rm
syntax: sudo docker service rm <service-id> or sudo docker service rm <service-name>
sudo docker service rm z3ocao16vpdesq4wh325q2r9z
'''
Output:
z3ocao16vpdesq4wh325q2r9z
'''

sudo docker service rm old-service-nginx
'''
Output:
old-service-nginx
'''

# view the service logs - from swarm manager
syntax: sudo docker service logs <service-name> or sudo docker service logs <service-id>
sudo docker service logs nginx
'''
Output:
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx.1.mhc2qgtja709@ip-172-31-20-8    | /docker-entrypoint.sh: Configuration complete; ready for start up
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: using the "epoll" event method
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: nginx/1.21.0
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: built by gcc 8.3.0 (Debian 8.3.0-6)
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: OS: Linux 5.4.0-1045-aws
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: start worker processes
nginx.1.mhc2qgtja709@ip-172-31-20-8    | 2021/06/23 06:00:16 [notice] 1#1: start worker process 31
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx.3.5vib7z3b4041@ip-172-31-19-156    | /docker-entrypoint.sh: Configuration complete; ready for start up
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: using the "epoll" event method
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: nginx/1.21.0
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: built by gcc 8.3.0 (Debian 8.3.0-6)
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: OS: Linux 5.8.0-1035-aws
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: start worker processes
nginx.3.5vib7z3b4041@ip-172-31-19-156    | 2021/06/23 06:00:16 [notice] 1#1: start worker process 31
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | /docker-entrypoint.sh: Configuration complete; ready for start up
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: using the "epoll" event method
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: nginx/1.21.0
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: built by gcc 8.3.0 (Debian 8.3.0-6)
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: OS: Linux 5.4.0-1045-aws
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: start worker processes
nginx.2.b1vp0c1axf2d@ip-172-31-16-16    | 2021/06/23 06:00:16 [notice] 1#1: start worker process 31
'''

sudo docker service logs zh458gpgh5nnebin4h5bkoqu0


# To know the list of service running - manager
sudo docker service ls
'''
Output:
ID             NAME      MODE         REPLICAS   IMAGE          PORTS
zh458gpgh5nn   nginx     replicated   3/3        nginx:latest   *:80->80/tcp
'''

# upscale/downscale of services - manager
syntax: sudo docker service scale <service-name>=<no.of replicas>
or sudo docker service scale <service-id>=<no.of replicas>
sudo docker service scale nginx=3
'''
Output:
nginx scaled to 3
overall progress: 3 out of 3 tasks
1/3: running   [==================================================>]
2/3: running   [==================================================>]
3/3: running   [==================================================>]
verify: Service converged
'''

sudo docker service scale zh458gpgh5nn=3
'''
Output:
zh458gpgh5nn scaled to 3
overall progress: 3 out of 3 tasks
1/3: running   [==================================================>]
2/3: running   [==================================================>]
3/3: running   [==================================================>]
verify: Service converged
'''

# inspect a service - manager
syntax: sudo docker service inspect --pretty <service-name>
or sudo docker service inspect --pretty <service-id>
or sudo docker service inspect <service-name>/<service-id>

sudo docker service inspect --pretty nginx
'''
Output:
ID:             zh458gpgh5nnebin4h5bkoqu0
Name:           nginx
Service Mode:   Replicated
 Replicas:      3
Placement:
UpdateConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:         nginx:latest@sha256:abd47d0da083da6d0de8bdea7597809cce30950680a065f610cb972dfed215c8
 Init:          false
Resources:
Endpoint Mode:  vip
Ports:
 PublishedPort = 80
  Protocol = tcp
  TargetPort = 80
  PublishMode = ingress
'''

sudo docker service inspect --pretty zh458gpgh5nnebin4h5bkoqu0
'''
Output:
ID:             zh458gpgh5nnebin4h5bkoqu0
Name:           nginx
Service Mode:   Replicated
 Replicas:      3
Placement:
UpdateConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:         nginx:latest@sha256:abd47d0da083da6d0de8bdea7597809cce30950680a065f610cb972dfed215c8
 Init:          false
Resources:
Endpoint Mode:  vip
Ports:
 PublishedPort = 80
  Protocol = tcp
  TargetPort = 80
  PublishMode = ingress
'''


# list all nodes running a service - manager
syntax: sudo docker service ps <service-id>
or sudo docker service ps <service-name>

sudo docker service ps nginx
'''
Output:
ID             NAME      IMAGE          NODE               DESIRED STATE   CURRENT STATE            ERROR     PORTS
mhc2qgtja709   nginx.1   nginx:latest   ip-172-31-20-8     Running         Running 52 minutes ago
b1vp0c1axf2d   nginx.2   nginx:latest   ip-172-31-16-16    Running         Running 52 minutes ago
5vib7z3b4041   nginx.3   nginx:latest   ip-172-31-19-156   Running         Running 52 minutes ago
'''

sudo docker service ps zh458gpgh5nnebin4h5bkoqu0
'''
Output:
ID             NAME      IMAGE          NODE               DESIRED STATE   CURRENT STATE            ERROR     PORTS
mhc2qgtja709   nginx.1   nginx:latest   ip-172-31-20-8     Running         Running 53 minutes ago
b1vp0c1axf2d   nginx.2   nginx:latest   ip-172-31-16-16    Running         Running 53 minutes ago
5vib7z3b4041   nginx.3   nginx:latest   ip-172-31-19-156   Running         Running 53 minutes ago
'''

# deployments in swarm using docker stack function
syntax: sudo docker stack deploy -c <yaml-file>.yml <stack-name>
# ensure we have defined services in .yml file before we use the command
sudo docker stack deploy -c practice.yml nginx-stack
'''
Output:
'''

# scaling the service using adding replicas
syntax: sudo docker service scale <service-name>=<no.of replicas>
or sudo docker serice scale <service-id>=<no.of replicas>

sudo docker service scale redis-new=6
'''
Output:
redis-new scaled to 6
overall progress: 6 out of 6 tasks
1/6: running   [==================================================>]
2/6: running   [==================================================>]
3/6: running   [==================================================>]
4/6: running   [==================================================>]
5/6: running   [==================================================>]
6/6: running   [==================================================>]
verify: Service converged
'''

sudo docker service scale fudj1oogjy7a=3
'''
Output:
fudj1oogjy7a scaled to 2
overall progress: 2 out of 2 tasks
1/2: running   [==================================================>]
2/2: running   [==================================================>]
verify: Service converged
'''

# rolling updates of the service
syntax: sudo docker service update --image <image-name> <service-name>
or sudo docker service update --image <image-name> <service-id>

sudo docker service update --image redis:3.0.7 redis-new
'''
Output:
redis-new
overall progress: 2 out of 2 tasks
1/2: running   [==================================================>]
2/2: running   [==================================================>]
verify: Service converged
'''

# check the service with update version
sudo docker service ls
'''
Output:
ID             NAME           MODE         REPLICAS   IMAGE          PORTS
p9zniz3dbd4m   anurag2376     replicated   3/3        redis:latest
sykwt18njhps   nginx-deploy   replicated   5/5        nginx:1.21.0   *:80->80/tcp
fudj1oogjy7a   redis-new      replicated   2/2        redis:3.0.7
'''

# Draining nodes - this situation can occur if some of the nodes went to maintainence, so all tasks would be moved between worker and manager nodes
syntax: sudo docker node update --availability <drain/active/pause> <node-id>


# worker2 tasks before drain 
sudo docker ps 
'''
Output:
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS      NAMES
7a354b472050   redis:latest   "docker-entrypoint.s…"   36 minutes ago   Up 36 minutes   6379/tcp   anurag2376.3.sqpi9rpfltexc1r4dxm1wnnzo
dc4017a91cf0   nginx:1.21.0   "/docker-entrypoint.…"   40 minutes ago   Up 40 minutes   80/tcp     nginx-deploy.1.ig6untzw8ran5icshgfjwxit1
1091e3ad8727   nginx:1.21.0   "/docker-entrypoint.…"   40 minutes ago   Up 40 minutes   80/tcp     nginx-deploy.2.o56w1wicspafeneci473i9wkj
ac2151404d3d   nginx:1.21.0   "/docker-entrypoint.…"   40 minutes ago   Up 40 minutes   80/tcp     nginx-deploy.4.q2z3szmxa2xq7fdpju09727n1
'''

# drain worker2
sudo docker node update --availability drain 0ug1i4e09p2oczdbj7usakzwo
'''
Output:
0ug1i4e09p2oczdbj7usakzwo
'''

sudo docker node update --availability pause 0ug1i4e09p2oczdbj7usakzwo

sudo docker node update --availability active 0ug1i4e09p2oczdbj7usakzwo

# check the tasks of worker2 node after drain, tasks would be shared or moved between worker1 and manager
sudo docker ps
'''
Output:
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
'''

# Conneting nodes to networks - create a network
syntax: sudo docker network create --driver <overlay/bridge/host> <network-name>

sudo docker network create --driver overlay net-1
'''
Output:
imwkex88jugqct6njru7g0mgj
'''

# adding service to network
syntax: sudo docker service create --replicas <no.of replicas> --network <network-name> --name <service-name> <image-name>
 
sudo docker service create --replicas 3 --network net-1 --name mongo-db-service mongo:latest
'''
Output:
ian9jlcatw5o1many941g9nyb
overall progress: 3 out of 3 tasks
1/3: running   [==================================================>]
2/3: running   [==================================================>]
3/3: running   [==================================================>]
verify: Service converged
'''

# listing the networks
sudo docker network ls
'''
Output:
NETWORK ID     NAME              DRIVER    SCOPE
tc272k8up5ls   anurag-1          overlay   swarm
b8e89f7fa51a   bridge            bridge    local
00e5730fee29   docker_gwbridge   bridge    local
42eaf2754ef2   host              host      local
rt7yrx8kmt0t   ingress           overlay   swarm
imwkex88jugq   net-1             overlay   swarm
ff4914b0b389   none              null      local
'''

# inspect the info/details of added network
syntax: sudo docker network inspect <network-name>
or sudo docker network inspect <network-id>

sudo docker network inspect net-1
'''
Output:
[
    {
        "Name": "net-1",
        "Id": "imwkex88jugqct6njru7g0mgj",
        "Created": "2021-06-24T08:26:10.837045798Z",
        "Scope": "swarm",
        "Driver": "overlay",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "10.0.3.0/24",
                    "Gateway": "10.0.3.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "aa76d51c6139dd086bb756b192b0cb51cd858ae17bf073f4b5322b827e522592": {
                "Name": "mongo-db-service.2.my5jij1up4m1rxk2sdh6fcae0",
                "EndpointID": "5e5aba095c85bb168512fea964e9164d159d87201806a5f7126e819a992f75ed",
                "MacAddress": "02:42:0a:00:03:04",
                "IPv4Address": "10.0.3.4/24",
                "IPv6Address": ""
            },
            "lb-net-1": {
                "Name": "net-1-endpoint",
                "EndpointID": "f786e0a9be89d89a82c4395f620e607c9052ad5c23b9b5330ae6dfafba037298",
                "MacAddress": "02:42:0a:00:03:07",
                "IPv4Address": "10.0.3.7/24",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.driver.overlay.vxlanid_list": "4099"
        },
        "Labels": {},
        "Peers": [
            {
                "Name": "3948c6c3512c",
                "IP": "3.142.146.1"
            },
            {
                "Name": "b97d2d64d969",
                "IP": "172.31.16.16"
            }
        ]
    }
]
'''

sudo docker network inspect tc272k8up5ls
'''
Output:
[
    {
        "Name": "anurag-1",
        "Id": "tc272k8up5lsvpudzpd9f31oj",
        "Created": "2021-06-24T07:23:50.57489799Z",
        "Scope": "swarm",
        "Driver": "overlay",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "10.0.2.0/24",
                    "Gateway": "10.0.2.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "0275dbf334fb35fb8489170b9f953b797ace21b3aa1b8bf2e24292069452f0cb": {
                "Name": "anurag2376.3.o29omy8n79i0pxfgcatmerxdk",
                "EndpointID": "f1a955e483ced68468c7a5683bd8b12cb29fef69adec66e7e390e18bf4b67c72",
                "MacAddress": "02:42:0a:00:02:09",
                "IPv4Address": "10.0.2.9/24",
                "IPv6Address": ""
            },
            "119419efc9cc6a57c1d60409a7281deb62a3dc8463abe72225f499351a4e3aa1": {
                "Name": "anurag2376.1.bd94nex40xwyz72yhi60waefe",
                "EndpointID": "38a96fc4a317f85494ec24a56fddeedc912231fa81522a28499bd6ed2f88e80b",
                "MacAddress": "02:42:0a:00:02:05",
                "IPv4Address": "10.0.2.5/24",
                "IPv6Address": ""
            },
            "lb-anurag-1": {
                "Name": "anurag-1-endpoint",
                "EndpointID": "0655fb1d8bc9101c1078856e85716960c4caaaf99da9123b1bbe6cde7e4ae4ed",
                "MacAddress": "02:42:0a:00:02:08",
                "IPv4Address": "10.0.2.8/24",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.driver.overlay.vxlanid_list": "4098"
        },
        "Labels": {},
        "Peers": [
            {
                "Name": "3948c6c3512c",
                "IP": "3.142.146.1"
            },
            {
                "Name": "b97d2d64d969",
                "IP": "172.31.16.16"
            }
        ]
    }
]
'''

# removing all networks which are not in used by any service
syntax: sudo docker network prune
'''
Output:
'''

# removing network
sudo docker network rm tc272k8up5ls
'''
Output:
'''

