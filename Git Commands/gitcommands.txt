#  git version
git --version
'''
Output:
git version 2.26.0.windows.1
'''

#git help [command to get help for]
git help --all

#get help for git stash
git help stash

#get help for git commit
git help commit

# setting username
git config --global user.name "kbhat1234"
git config user.name
'''
Output:
kbhat1234
'''

# setting user email id
git config --global user.email "karthikbhat@live.com"
git config user.email
'''
Output:
karthikbhat@live.com
'''

# avoid merge commits for pull
git config --global branch.autosetuprebase always
git config branch.autosetuprebase
'''
Output:
always
'''

# color highlighting
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto

git config color.ui
'''
Output:
true
'''

git config color.status
'''
Output:
auto
'''

git config color.branch
'''
Output:
auto
'''

# Setting default editor
git config --global core.editor vim
git config core.editor
'''
Output:
vim
'''

# setting default merge tool
git config --global merge.tool vimdiff
git config merge.tool
'''
Output:
vimdiff
'''

# listing git config settings
git config --list
'''
Output:
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor=nano.exe
credential.helper=manager
user.name=kbhat1234
user.email=karthikbhat@live.com
color.ui=true
color.status=auto
color.branch=auto
core.editor=vim
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.local.remote=origin
branch.local.merge=refs/heads/local
branch.master.remote=origin
branch.master.merge=refs/heads/master
'''

# removing an entry from global config for variable defined in config
git config --global --unset core.excludesfile

git config --list
'''
Output:
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor=nano.exe
credential.helper=manager
user.name=kbhat1234
user.email=karthikbhat@live.com
color.ui=true
color.status=auto
color.branch=auto
core.editor=vim
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.local.remote=origin
branch.local.merge=refs/heads/local
branch.master.remote=origin
branch.master.merge=refs/heads/master
'''

#git alias (--global config)
git config --global alias.ch checkout
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co commit

#git alias (--local config)
git config --local alias.ch checkout
git config --local alias.st status
git config --local alias.br branch
git config --local alias.co commit

#git alias (--system config)
git config --system alias.ch checkout
git config --system alias.st status
git config --system alias.br branch
git config --system alias.co commit

# git initialization
git init
'''
Output:
Reinitialized existing Git repository in C:/Users/karth/PycharmProjects/PythonPackage/Programs/.git/
'''

#git initialize an empty repository named folder demo
git init demo
'''
Output:
Initialized empty Git repository in C:/Users/kbhat2376/Projects/abcd/.git/
'''

# link the local repository to an empty GitHub repository
# git remote add origin [url]
git remote add origin https://github.com/kbhat1234/python_3.8.git
git config remote.origin.url
'''
Output:
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
'''
git config remote.origin.fetch
'''
Output:
+refs/heads/*:refs/remotes/origin/*
'''

#config list in global
git config --global --list
'''
Output:
user.name=kbhat1234
user.email=karthikbhat@live.com
color.ui=true
color.status=auto
color.branch=auto
core.editor=vim
merge.tool=vimdiff
'''

#config list in local
git config --local --list
'''
Output:
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
advice.addignoredfile=false
'''

#config list in system
git config --system --list
'''
Output:
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
'''

# link the local repository to an empty GitHub repository
git remote add destination https://github.com/kbhat1234/shell-script.git
git config remote.destination.url
git config remote.destination.fetch
'''
Output:
https://github.com/kbhat1234/shell-script.git
+refs/heads/*:refs/remotes/destination/*
'''

s# view the current remotes
git remote -v
'''
Output:
destination     https://github.com/kbhat1234/shell-script.git (fetch)
destination     https://github.com/kbhat1234/shell-script.git (push)
origin  https://github.com/kbhat1234/python_3.8.git (fetch)
origin  https://github.com/kbhat1234/python_3.8.git (push)
''''

# Remove remote
git remote rm destination
git remote -v
'''
Output:
origin  https://github.com/kbhat1234/python_3.8.git (fetch)
origin  https://github.com/kbhat1234/python_3.8.git (push)
'''

# git clone [url]
git clone git https://github.com/kbhat1234/RESTAPI.git
'''
Output:
Cloning into 'RESTAPI'...
remote: Enumerating objects: 479, done.
remote: Total 479 (delta 0), reused 0 (delta 0), pack-reused 479
Receiving objects: 100% (479/479), 77.35 KiB | 286.00 KiB/s, done.
Resolving deltas: 100% (194/194), done.
'''

vi a1.txt # modify some contents to the already synced file
touch a2.txt # add a new file on the local working directory

# status to know which branch, which files are modified, new, deleted, etc.
git status
'''
Output:
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   a1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a2.txt

no changes added to commit (use "git add" and/or "git commit -a")
'''

git status -v
'''
Output:
On branch local
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Demo/example1.py
        new file:   Demo/example2.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt

diff --git a/Demo/example1.py b/Demo/example1.py
index a383600..c4f5448 100644
--- a/Demo/example1.py
+++ b/Demo/example1.py
@@ -27,17 +27,6 @@ print("Full concatenated string is ", str1+str2)
 print("Hello, ", str1)
 print("Hello, ", str2)

-# isinstance() checks if the object (first argument) is an instance or subclass of classinfo class (second argument).
-
-print(isinstance(str1, str))
-print(isinstance(f, int))
-print(isinstance(c, float))
-print(isinstance(str2, (int, float, str)))
-print(isinstance(str(f), (int, float, str)))
-print(isinstance(str(f), int))
-print(isinstance(str(f), float))
-print(isinstance(str(f), str))
-
 print(str1*2)
 print(str1[0:4])
 print(str1[4:])
@@ -45,9 +34,7 @@ print(str1[0:])
 print(str1[:])


-def StringOperations():
-    str3 = "Welcome to "
-    str4 = "Python "
+def StringOperations1():
     print("Full concatenated string is ", str1 + str2)
     print(str1*4)
     print((str1*4)*2)
@@ -55,5 +42,37 @@ def StringOperations():
     print("Hello, ", str2)


-StringOperations()
+def StringOperations2():
+    print(str1 * 2)
+    print(str1[0:4])
+    print(str1[4:])
+    print(str1[0:])
+    print(str1[:])
+    StringOperations1()
+
+
+def IsInstance():
+    # isinstance() checks if the object (first argument) is an instance or subclass of classinfo class (second argument).
+    print(isinstance(str1, str))
+    print(isinstance(f, int))
+    print(isinstance(c, float))
+    print(isinstance(str2, (int, float, str)))
+    print(isinstance(str(f), (int, float, str)))
+    print(isinstance(str(f), int))
+    print(isinstance(str(f), float))
+    print(isinstance(str(f), str))
+    StringOperations1()
+    StringOperations2()
+
+# StringOperations1()
+# StringOperations2()
+# IsInstance()
+
+s1 = "Karthik"
+s2 = "Rini Das Bhat"
+
+print(s1 in s2)
+print(s1 not in s2)

+print("Bhat" in s1)
+print("Bhat" in s2)
\ No newline at end of file
diff --git a/Demo/example2.py b/Demo/example2.py
new file mode 100644
index 0000000..e69de29
'''

git status -s
'''
Output:
M  Demo/example1.py
A  Demo/example2.py
 M "Git Commands/gitcommands.txt"
'''

git status -b
'''
Output:
On branch local
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Demo/example1.py
        new file:   Demo/example2.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt
'''

git status --show-stash
'''
On branch local
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Demo/example1.py
        new file:   Demo/example2.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt
'''

git status --long
'''
Output:
On branch local
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Demo/example1.py
        new file:   Demo/example2.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt
'''

git status -u
'''
Output:
On branch local
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Demo/example1.py
        new file:   Demo/example2.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt
'''

# to know code branches on your local working directory
git branch
'''
Output:
  local1.0
* master
'''

git branch -r
'''
Output:
 origin/HEAD -> origin/master
  origin/local
  origin/master
  origin/version2.0
'''

# to know the remote branches
git branch --remotes
'''
Output:
  origin/local
  origin/master
'''

# create a new branch with name
# git branch [branch_name]
git branch version2.0

git branch
'''
Output:
  local1.0
* master
  version2.0
'''

# switching between one branch of version of code to another
# git checkout [branch_name]
git checkout version2.0
'''
Output:
Switched to branch 'version2.0'
M       a1.txt  # M followed with file name a1.txt is modified, already synced with git repo before
'''

# before deleting the branch version2.0
git branch
'''
Output:
  master
* version2.0
'''

# delete the created branch from local
# git branch -D [branch_name]
git branch -D version2.0
'''
Output:
Deleted branch version2.0 (was 0ffd94f).
'''

# after delete of branch
git branch
'''
Output:
* master
'''

'''merging 2 branches locally and pushing to remote repositories
git merge [branch1] [branch2]
checkout to local repository branch "local"
make some changes to gitcommands.txt
commit the changes to local
then push to remote repository branch "origin/local"
checkout to master, merge with local and then push to "origin/master"
'''

git status
'''
Output:
On branch local
Your branch is up to date with 'origin/local'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   gitcommands.txt

no changes added to commit (use "git add" and/or "git commit -a")
'''

git commit -a -m "adding some more commands to gitcommands.txt"
'''
Output:
[local dad0fdf] modifying gitcommands.txt
 1 file changed, 32 insertions(+), 2 deletions(-)
'''

# changes pushed to remote repository origin/local
git push origin local
'''
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 641 bytes | 641.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/kbhat1234/python_3.8.git
   5e527e1..dad0fdf  local -> local

'''

git checkout master
'''
Output:
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
'''
# merge master branch with local updated branch

git merge master local
'''
Output:
Updating 5e527e1..4d2076a
Fast-forward
 Git Commands/gitcommands.txt | 57 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 55 insertions(+), 2 deletions(-)
'''

# lists version history of the current branch - local/master
git log
'''
Output:
commit 66c45478a4610b79a57f18c4a564fc2bc7898db0 (HEAD -> local, origin/local)
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 09:41:44 2020 +0530

    merge commands

commit d0ad4143844a6ccc968d0d7eb1c867dfddff3d55
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 09:40:32 2020 +0530

    add
'''

# lists version history for a file, including renames
# git log --follow [file]
git log --follow gitcommands.txt
'''
Output:
commit 66c45478a4610b79a57f18c4a564fc2bc7898db0 (HEAD -> local, origin/local)
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 09:41:44 2020 +0530

    merge commands

commit d0ad4143844a6ccc968d0d7eb1c867dfddff3d55
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 09:40:32 2020 +0530

    add

commit 9ca0636275551f68978d355e9ba9b0dd1705c466
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 09:31:36 2020 +0530

    merge commands
'''

# git diff [1st-branch] [2nd-branch] difference betweeen 2 branches
git diff local master
'''
Output:
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index 314f02b..0000000
--- a/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-*.txt
\ No newline at end of file
diff --git a/Git Commands/gitcommands.txt b/Git Commands/gitcommands.txt
index a663fa5..7492273 100644
--- a/Git Commands/gitcommands.txt
+++ b/Git Commands/gitcommands.txt
@@ -297,4 +297,7 @@ Updating 5e527e1..4d2076a
 Fast-forward
  Git Commands/gitcommands.txt | 57 ++++++++++++++++++++++++++++++++++++++++++--
  1 file changed, 55 insertions(+), 2 deletions(-)
-'''
\ No newline at end of file
+'''
+
+
+
'''

# outputs metadata and content changes of the specified commit
# git show [commit]
#git show 4d2076a89ada77797e5875c9f1
'''
Output:
commit 4d2076a89ada77797e5875c9f1e48a7cd2f2c040
Author: kbhat1234 <karthikbhat@live.com>
Date:   Thu Apr 16 08:40:25 2020 +0530

    add

diff --git a/Git Commands/gitcommands.txt b/Git Commands/gitcommands.txt
index cb51965..a1cfde8 100644
--- a/Git Commands/gitcommands.txt
+++ b/Git Commands/gitcommands.txt
@@ -285,10 +285,8 @@ To https://github.com/kbhat1234/python_3.8.git
 git checkout master
 '''
 Output:
-error: Your local changes to the following files would be overwritten by checkout:
-        Git Commands/gitcommands.txt
-Please commit your changes or stash them before you switch branches.
-Aborting
+Switched to branch 'master'
+Your branch is up to date with 'origin/master'.
 '''

 git merge master local
'''

# Snapshots the file in preparation for versioning
# git add [file]
# git add .
git add abc1.txt
git status
'''
Output:
On branch local
Your branch is up to date with 'origin/local'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Git Commands/gitcommands.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt
'''
git status -s
'''
Output:
?? a2.txt
'''

# Records file snapshots permanently in version history
# git commit -a -m "[add descriptive commit message]"
git commit -a -m "add files"
'''
Output:
[local 85461d0] add
 1 file changed, 162 insertions(+), 1 deletion(-)
'''

# synchronize changes - fetch, merge, push, pull
# fetch/download all the history of the remote tracking branch
# git fetch [url]
# git fetch origin
git fetch https://github.com/kbhat1234/python_3.8.git
'''
Output:
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 676 bytes | 5.00 KiB/s, done.
From https://github.com/kbhat1234/python_3.8
   cd71d28..2cddd67  master     -> origin/master
---------------------------------------------------------------------
From https://github.com/kbhat1234/python_3.8
 * branch            HEAD       -> FETCH_HEAD
'''

# merging 2 or more remotely tracking branch
# checkout to local branch using git checkout [branchname]
git checkout local
# modify the file gitcommands.txt with adding some more lines of code
# after modify add/commit the changes
git commit -a -m "commit the changes"
# git merge [branch_1] [branch_2]
# merge master with changes on local
git merge master local
'''
Output:
Updating 2cddd67..e0b0141
Fast-forward
 Git Commands/gitcommands.txt | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)
'''

# push the changes from local repository branch to remote repository local branch
# git push origin [branchname]
# as we we merged master with local, now push the merged code from master to remote tracking branch master
git push origin master
'''
Output:
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 822 bytes | 822.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/kbhat1234/python_3.8.git
   2cddd67..e0b0141  master -> master
'''

# now push the local code as well to remote branch local
git push origin local
'''
Output:
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/kbhat1234/python_3.8.git
   2cddd67..e0b0141  local -> local
'''

# updates your current local branch with the updated code if there is any delta changes
# git pull origin [branch_name]
git pull origin master
git pull origin local

# to know the HEAD pointer pointing to branches - both branches HEAD pointing to same version of code
ls .git/refs/heads/
'''
Output:
master local
'''

cat .git/refs/heads/master
'''
Output:
1bb2eabfeec74570c10f263c3bade01a22c354aa
'''

cat .git/refs/heads/local
'''
Output:
1bb2eabfeec74570c10f263c3bade01a22c354aa
'''

cat .git/config
'''
Output:
[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
[remote "origin"]
        url = https://github.com/kbhat1234/python_3.8.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch "local"]
        remote = origin
        merge = refs/heads/local
[branch "master"]
        remote = origin
        merge = refs/heads/master
'''

# when local and master branches have different versions of HEAD pointer
cat .git/refs/heads/local .git/refs/heads/master
'''
Output:
bfcff0d44c236928ead064d236e734ff55ea4269
662ba40a30e2bf4950893785a99ff0fac200260e
'''

<<<<<<< Updated upstream
# reference logs of all commits
git reflog
'''
Output:
03bd858 (HEAD -> local, origin/local) HEAD@{0}: commit (merge): conflict fix
db54e5d HEAD@{1}: commit: changed the values
9469583 (origin/master, master) HEAD@{2}: reset: moving to HEAD
9469583 (origin/master, master) HEAD@{3}: reset: moving to HEAD
9469583 (origin/master, master) HEAD@{4}: checkout: moving from master to local
9469583 (origin/master, master) HEAD@{5}: merge local: Fast-forward
5c0c664 HEAD@{6}: checkout: moving from local to master
9469583 (origin/master, master) HEAD@{7}: commit: add
79f40c9 HEAD@{8}: commit: add
552e2f3 HEAD@{9}: commit: update
5c0c664 HEAD@{10}: checkout: moving from master to local
5c0c664 HEAD@{11}: merge local: Fast-forward
231e16f HEAD@{12}: checkout: moving from local to master
5c0c664 HEAD@{13}: commit: changed the code by adding and removing some code
231e16f HEAD@{14}: checkout: moving from master to local
231e16f HEAD@{15}: merge local: Fast-forward
'''

# reset/revert the commits done
# git reset --hard <commit>
git reset --hard 03bd858

# git reset --hard origin/master

# git stash  - temporary space to store partial changes and later commit the same.
git stash
'''
Output:
Saved working directory and index state WIP on local: 03bd858 conflict fix
'''

# to view the list of all changed files in stack
git stash list
'''
Output:
stash@{0}: WIP on local: 03bd858 conflict fix
stash@{1}: WIP on local: 9469583 add
'''

# to pop file stack in stash area
git stash pop
'''
Output:
On branch local
Your branch is up to date with 'origin/local'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Commands/gitcommands.txt

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (e16f1c89e3f5e00bb75fcc063e157abc7a5c09ec)
'''

# will give the HEAD positions on various changes with crisp info
git reflog
'''
9469583 (HEAD -> local, origin/master, origin/local, master) HEAD@{0}: checkout: moving from master to local
9469583 (HEAD -> local, origin/master, origin/local, master) HEAD@{1}: merge local: Fast-forward
5c0c664 HEAD@{2}: checkout: moving from local to master
9469583 (HEAD -> local, origin/master, origin/local, master) HEAD@{3}: commit: add
79f40c9 HEAD@{4}: commit: add
552e2f3 HEAD@{5}: commit: update
5c0c664 HEAD@{6}: checkout: moving from master to local
5c0c664 HEAD@{7}: merge local: Fast-forward
231e16f HEAD@{8}: checkout: moving from local to master
5c0c664 HEAD@{9}: commit: changed the code by adding and removing some code
231e16f HEAD@{10}: checkout: moving from master to local
231e16f HEAD@{11}: merge local: Fast-forward
753403e HEAD@{12}: checkout: moving from local to master
'''

git push --set--upstream origin feature

git branch -a
git branch -r
git branch --remotes
git branch

git branch new_branch
git checkout -b new_branch
git branch -m new_branch branch1.0
git branch -d branch1.0
git branch -D branch1.0

git checkout master

git pull devops master


git restore --staged a1.txt
git status
git status -s
git status --long
git status -u

git add .
git add *
git add a1.txt a2.txt

git config --list
git config --global --list
git config --local --list
git config --system --list

git config --global alias.rs restore
git config --local remote.devops.url https://github.com/kbhat1234/DevOps_GIT.git
git config --system credential.https://dev.azure.com.usehttppath true

git config alias.rs
git config remote.devops.url

# Req1: To see difference in file between working directory and staging/index
$ git diff li2.txt

Output:
=============
warning: LF will be replaced by CRLF in li2.txt.
The file will have its original line endings in your working directory
diff --git a/li2.txt b/li2.txt
index ba4c514..81d4d52 100644
--- a/li2.txt
+++ b/li2.txt
@@ -1 +1 @@
-Welcome
+Welcome to jungle

# Req2:To see difference in file content between working directory and last commit (local repo)
git diff HEAD li2.txt

Output:
===========
diff --git a/li2.txt b/li2.txt
index 81d4d52..9a6b358 100644
--- a/li2.txt
+++ b/li2.txt
@@ -1 +1,3 @@
 Welcome to jungle
+fsdfksdjfkjskfjkls
+sdkfjskdjfks

# Req3: To see difference in file content between staged copy(staging) and last commit (local repo)
git diff --staged HEAD li2.txt
or 
git diff --cached HEAD li2.txt

Output:
============
diff --git a/li2.txt b/li2.txt
index 81d4d52..9a6b358 100644
--- a/li2.txt
+++ b/li2.txt
@@ -1 +1,3 @@
 Welcome to jungle
+fsdfksdjfkjskfjkls
+sdkfjskdjfks

# Req4: To see difference in file content between specific commit with working directory
git diff 8346f2b li2.txt

Output:
===========
diff --git a/li2.txt b/li2.txt
index 81d4d52..9a6b358 100644
--- a/li2.txt
+++ b/li2.txt
@@ -1 +1,3 @@
 Welcome to jungle
+fsdfksdjfkjskfjkls
+sdkfjskdjfks

#Req5: To see difference in file content between specfic commit and staging area copy
git diff --staged 8346f2b li2.txt

Output:
=============
diff --git a/li2.txt b/li2.txt
index 81d4d52..9a6b358 100644
--- a/li2.txt
+++ b/li2.txt
@@ -1 +1,3 @@
 Welcome to jungle
+fsdfksdjfkjskfjkls
+sdkfjskdjfks

#Req6: To see difference in file content between 2 specific commits (local repo commits)
git diff 8346f2b 8913432

Output:
===========
diff --git a/li2.txt b/li2.txt
deleted file mode 100644
index 81d4d52..0000000
--- a/li2.txt
+++ /dev/null
@@ -1 +0,0 @@
-Welcome to jungle

#Req7: To see difference in file between 2 brnaches in local repo
git diff master b1

Output:
===========
diff --git a/Git-Commands b/Git-Commands
new file mode 160000
index 0000000..7a3eb02
--- /dev/null
+++ b/Git-Commands
@@ -0,0 +1 @@
+Subproject commit 7a3eb02f16443c0c29e83e51a2ed5aa940efe051
diff --git a/file1.txt b/file1.txt
new file mode 100644
index 0000000..fa49b07
--- /dev/null
+++ b/file1.txt
@@ -0,0 +1 @@
+new file
diff --git a/file2.txt b/file2.txt
new file mode 100644
index 0000000..e69de29
diff --git a/li1.txt b/li1.txt
deleted file mode 100644
index 2f8f740..0000000
--- a/li1.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-Animals
-birds
diff --git a/li2.txt b/li2.txt
deleted file mode 100644
index 9a6b358..0000000
--- a/li2.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-Welcome to jungle
-fsdfksdjfkjskfjkls
-sdkfjskdjfks

#Req8: To see difference in content between local repo and remote repositories
git diff master devops/master

Output:
========
diff --git a/li1.txt b/li1.txt
deleted file mode 100644
index 2f8f740..0000000
--- a/li1.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-Animals
-birds
diff --git a/li2.txt b/li2.txt
deleted file mode 100644
index 9a6b358..0000000
--- a/li2.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-Welcome to jungle
-fsdfksdjfkjskfjkls
-sdkfjskdjfks


# git rm command
#Req1: Remove the files from both working tree and from staging index area
git rm -f file1.txt --> one file or more from staging and working tree
git rm -rf . -> remove All files from staging and working tree


#Req2: Remove the files only from staging index area and not from working tree
git rm --cached file2.txt
or
git rm --staged file2.txt

#Req3: Remove the files only from workig tree and not from staging index area
rm file3.txt


#git checkout - unstaged changes/files of tracked files
git checkout -- file1.txt

#git checkout - untracked files do not work
git checkout -- file1.txt


#git reset command
#remove the changes from staging area and not working direcrtory
touch k2.inc

ls -al

git add k2.inc

git ls-files
'''
Output:
k2.inc
'''

git reset k2.inc

git reset --mixed <commit-id>
git reset --soft <commit-id>
git reset --hard <commit-id>


#git merging
#------------Master branch
touch a1.txt a2.txt a3.txt
git add a1.txt;git commit -m "C1M"
git add a2.txt;git commit -m "C2M"
git add a3.txt;git commit -m "C3M"

git log --oneline

#-----checkout to feature branch----
git checkout -b feature

touch x1.txt x2.txt
git add x1.txt;git commit -m "C1F"
git add x2.txt;git commit -m "C2F"

git log --oneline

#-------checkout to master branch
git merge feature
